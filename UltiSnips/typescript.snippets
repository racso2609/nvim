snippet grcpE "gcp communt error" b
const error = '$1';
pinologger.info({
		Error: '$2: ${error}'
})
return void callback({
 code: Status.$3,
 details: error
})
endsnippet

snippet grcpUE "gcp Unexpected error" b
pinologger.info({
		Error: '$2: ${error}'
})
return void callback({
 code: Status.UNKNOWN,
 details: "Unexpected error!"
})
endsnippet

snippet error ".get(async(req,res)=>{})"
return next(new AppError("$1",$2))

endsnippet

snippet impErr "imp asyncHandler and app error"
import {asyncHandler} from '../utils/asyncHandler'
import {AppError} = from '../utils/AppError'
endsnippet

snippet asH "asyncHandler"
asyncHandler(async(req:Request,res:Response,_next:NextFunction)=>{

})
endsnippet

snippet router "express router"
import express = require('express');
const router = express.Router();



const $1 = router;
export default $1;
endsnippet

snippet clg "console.log(hola)" b
console.log($1)
endsnippet

snippet try "try and catch"
try{

}catch(${1:error}){

}
endsnippet

snippet ress "res.json"
res.status($1)
.json({
	success: true,
	status: "success",
	$2
})
endsnippet
snippet res "res.json"
res
.json({
	success: true,
	status: "success",
	$2
})
endsnippet

snippet it "it('', async() => {})" b
it('$1', async() => {
  $2
})
endsnippet

snippet desc "describe('', () => {})" b
describe('$1', () => {
  $2
})
endsnippet


snippet rfc "React function component" b
import React. {FC} from 'react'
const $1:FC = ${2:($3)} => {
  return (
    <$4>
      $5
    </$4>
  )
}

export default $1
endsnippet

snippet rnfc "React native function component" b
import React, {FC} from 'react'
import { ${4} } from 'react-native'

const $1:FC = ${2:($3)} => {
  return (
    <$4>
      $5
    </$4>
  )
}

export default $1
endsnippet

snippet rhc "React function component" b
import React from 'react'
const $1 = ${2:($3)} => {
  return {}
}

export default $1
endsnippet

snippet sdkM "ini module to sdk"
import { NetworkContract } from '../../base/NetworkContract'
import {  ContractInterface } from 'ethers'
import { BaseModule } from '../base/BaseModule'
import { BundledAbis } from '../../BundledAbis'

export class $1Module extends BaseModule {

	/**
   * Instantiates a $1 module.
   * @param networkContract the network contract this module should use
   */

	constructor(protected networkContract: NetworkContract, abis: ContractInterface[] = []) {
    super(networkContract, [BundledAbis.$2].concat(abis))
  }
}
endsnippet

snippet sdkRead "create read function"
public $1 = async():Promise<$2> => this.read("$1")
endsnippet

snippet sdkTx "create tx function"
public $1 = async($2):Promise<Transaction> => this.transaction("$1",$2)
endsnippet

snippet sdkfTx "create tx function"
public async $1 ($2):Promise<Transaction> {
	return this.transaction("$1",$2)
}
endsnippet
