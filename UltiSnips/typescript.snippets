snippet grcpE "gcp communt error" b
const error = '$1';
pinologger.info({
		Error: '$2: ${error}'
})
return void callback({
 code: Status.$3,
 details: error
})
endsnippet

snippet grcpUE "gcp Unexpected error" b
pinologger.info({
		Error: '$2: ${error}'
})
return void callback({
 code: Status.UNKNOWN,
 details: "Unexpected error!"
})
endsnippet

snippet error ".get(async(req,res)=>{})"
return next(new AppError("$1",$2))

endsnippet

snippet impErr "imp asyncHandler and app error"
import {asyncHandler} from '../utils/asyncHandler'
import {AppError} = from '../utils/AppError'
endsnippet

snippet asH "asyncHandler"
asyncHandler(async(req:Request,res:Response,_next:NextFunction)=>{

})
endsnippet

snippet router "express router"
import express = require('express');
const router = express.Router();



const $1 = router;
export default $1;
endsnippet

snippet clo "console.log()" b
console.log('=== $1', $1)
endsnippet


snippet col "console.log('=== hola')" b
console.log('=== $1')
endsnippet

snippet clg "console.log(hola)" b
console.log($1)
endsnippet

snippet try "try and catch"
try{

}catch(${1:error}){

}
endsnippet

snippet ress "res.json"
res.status($1)
.json({
	success: true,
	status: "success",
	$2
})
endsnippet
snippet res "res.json"
res
.json({
	success: true,
	status: "success",
	$2
})
endsnippet

snippet it "it('', async() => {})" b
it('$1', async() => {
  $2
})
endsnippet

snippet desc "describe('', () => {})" b
describe('$1', () => {
  $2
})
endsnippet

snippet eMetadata "endpoint metadata"
    // #swagger.tags = ['$1']
    // #swagger.summary = '$2'
    // #swagger.description = '$3'
endsnippet
